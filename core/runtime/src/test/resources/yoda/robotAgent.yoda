param height = 10;
param width = 10;
param no = 10;
param na = 5;

agent Robot =
    state:
        int dirx = 0;
        int diry = 0;
    features:
        int x = 0;
        int y = 0;
    observations:
        bool north = false;
        bool south = false;
        bool east = false;
        bool west = false;
        bool goal = false;
    actions :
        moveNorth [ dirx <- 0; diry <- 1;]
        moveSouth [ dirx <- 0; diry <- -1;]
        moveEast [ dirx <- 1; diry <- 0;]
        moveWest [ dirx <- -1; diry <- 0;]
        stop [ dirx <- 0; diry <- 0; ]
    behaviour :
        when goal -> [ stop: 1; ]
        orwhen !north -> [ moveNorth: 1; ]
        orwhen north -> [ moveEast: 0.5; moveWest: 0.5; ]
        orwhen north && east -> [ moveWest: 1; ]
        orwhen north && west -> [ moveEast: 1; ]
        otherwise [ stop: 1; ]
end

element Obstacle =
    int posx = 0;
    int posy = 0;
end

environment:
    sensing :
        Robot [
            north <- any Obstacle : (posy==it.y+1)&&(posx==it.x);
            south <- any Obstacle : (posy==it.y-1)&&(posx==it.x);
            east <- any Obstacle : (posx==it.x+1)&&(posy==it.y);
            west <- any Obstacle : (posx==it.x-1)&&(posy==it.y);
            goal <- it.y==height+1;
        ]
    dynamic :
        Robot [
           x <- x + dirx;
           y <- y + diry;
        ]
 end

 configuration Main :
    for i sampled distinct na time from floor(U[0, width]) do
        Robot[ x = i ; y = 0 ; ]
    endfor
    for o sampled distinct no time from floor(U[0, width]) do
       Obstacle[ posx = o; posy = floor(U[2, height]); ]
    endfor
 end


measure inGoalArea = #Robot[it.goal];
predicate success = %Robot[it.goal] ==  ;