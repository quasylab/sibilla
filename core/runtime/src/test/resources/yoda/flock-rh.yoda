param nbirds = 5;
param maxDist = 2; param minDist = 1;
param speed = 1; param threshold = 2;

agent Bird =
  state :
    real angle = 0.0;
  features:
    real x = 0.0;
    real y = 0.0;
  observations:
    real centerOfMass = 0.0;
    bool isTooFar = false;
    bool isTooClose = false;
  actions:
    goBack [angle <- centerOfMass+U[-1/4*PI, 1/4*PI];]
    escape [angle <- centerOfMass+U[3/4*PI, 5/4*PI];]
    skip [angle<-angle;]
  behaviour:
    when isTooFar -> [goBack:1;]
    orwhen isTooClose  -> [escape:1;]
    otherwise [ skip : 1;]
end

environment :
  sensing:
    Bird [
      let meanX = mean Bird[distance(it.x, it.y, x, y)<threshold]. x
      and meanY = mean Bird[distance(it.x, it.y, x, y)<threshold]. y
      in
        isTooFar <- distance(it.x, it.y, meanX, meanY) > maxDist;
        isTooClose <- distance(it.x, it.y, meanX, meanY) < minDist;
        centerOfMass <- angleOf(meanX, meanY, it.x, it.y );
      endlet
    ]
  dynamic:
    Bird [
      x <- x + cos(angle)*speed;
      y <- y + sin(angle)*speed;
    ]
end

configuration Main :
    for o sampled distinct nbirds time from U[0, nbirds] do
        Bird [ x = o; y = o; ]
    endfor
end