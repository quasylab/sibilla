param na = 3;
param tolerance = 2.0;
param tposX = 5.0;
param tposY = 5.0;

agent Finder =
    state:
        real dirx = 0.0;
        real diry = 0.0;
        bool found = false;
    features:
        real x = 0.0;
        real y = 0.0;
        bool light = false;
    observations:
        bool target_sensor = false;
        bool toTarget = false;
        real diffX = 0.0;
        real diffY = 0.0;
    actions:
        stop [ dirx <- 0.0; diry <- 0.0; found <- true; ]
        roam [ dirx <- U[-1.0 , 1.0]; diry <- U[-1.0 , 1.0]; found <- false; ]
        moveNorth [ dirx <- 0; diry <- U[0.0 , 1.0]; found <- false;]
        moveSouth [ dirx <- 0; diry <- U[-1.0 , 0.0]; found <- false;]
        moveEast [ dirx <- U[0.0 , 1.0]; diry <- 0; found <- false;]
        moveWest [ dirx <- U[-1.0 , 0.0]; diry <- 0; found <- false;]
    behaviour:
        when target_sensor -> [ stop:1 ]
        orwhen toTarget && (diffX < (-tolerance)) -> [ moveWest:1 ]
        orwhen toTarget && (diffX > tolerance) -> [ moveEast:1 ]
        orwhen toTarget && (diffY < (-tolerance)) -> [ moveSouth:1 ]
        orwhen toTarget && (diffY > tolerance) -> [ moveNorth:1 ]
        otherwise [ roam:1 ]
end

element Target =
    real posx = 0.0;
    real posy = 0.0;
end

environment :
    sensing:
        Finder [
            target_sensor <- (any Target : (abs(it.x - posx) < tolerance)) && (any Target : ( abs(it.y - posy) < tolerance));
            if (any Finder: light) then
                diffX <- (mean Finder [light] . x - it.x);
                diffY <- (mean Finder [light] . y - it.y);
                toTarget <- true;
            else
                diffX <- 0.0;
                diffY <- 0.0;
                toTarget <- false;
            endif
        ]
    dynamic:
        Finder [
           x <- x + dirx;
           y <- y + diry;
           light <- found;
        ]
end

configuration Main :
    for ox sampled distinct na time from U[0, 10] do
        Finder [ x = ox; y = 2.0; ]
    endfor
    Target [ posx = tposX; posy = tposY; ]
end